// Mocks generated by Mockito 5.4.4 from annotations
// in github_search_app/test/modules/mocks/mock_pulls.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:github_search_app/data/models/pull_data_model.dart' as _i5;
import 'package:github_search_app/data/repositories/pulls_repository_impl.dart'
    as _i8;
import 'package:github_search_app/domain/repositories/pulls_repository.dart'
    as _i2;
import 'package:github_search_app/presentation/cubit/pulls/pulls_cubit.dart'
    as _i6;
import 'package:github_search_app/presentation/cubit/pulls/pulls_state.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePullsRepository_0 extends _i1.SmartFake
    implements _i2.PullsRepository {
  _FakePullsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePullsState_1 extends _i1.SmartFake implements _i3.PullsState {
  _FakePullsState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PullsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPullsRepository extends _i1.Mock implements _i2.PullsRepository {
  MockPullsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.PullDataModel>?> fetchAllPulls(
    String? owner,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllPulls,
          [
            owner,
            name,
          ],
        ),
        returnValue: _i4.Future<List<_i5.PullDataModel>?>.value(),
      ) as _i4.Future<List<_i5.PullDataModel>?>);
}

/// A class which mocks [PullsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPullsCubit extends _i1.Mock implements _i6.PullsCubit {
  MockPullsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PullsRepository get pullsRepository => (super.noSuchMethod(
        Invocation.getter(#pullsRepository),
        returnValue: _FakePullsRepository_0(
          this,
          Invocation.getter(#pullsRepository),
        ),
      ) as _i2.PullsRepository);

  @override
  _i3.PullsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePullsState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.PullsState);

  @override
  _i4.Stream<_i3.PullsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.PullsState>.empty(),
      ) as _i4.Stream<_i3.PullsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initStateEvent(
    dynamic owner,
    dynamic name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #initStateEvent,
          [
            owner,
            name,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void emit(_i3.PullsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i3.PullsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PullsRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockPullsRepositoryImpl extends _i1.Mock
    implements _i8.PullsRepositoryImpl {
  MockPullsRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.PullDataModel>?> fetchAllPulls(
    String? owner,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllPulls,
          [
            owner,
            name,
          ],
        ),
        returnValue: _i4.Future<List<_i5.PullDataModel>?>.value(),
      ) as _i4.Future<List<_i5.PullDataModel>?>);
}
